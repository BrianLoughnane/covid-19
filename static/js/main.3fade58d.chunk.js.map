{"version":3,"sources":["serviceWorker.js","utils/index.js","components/line-chart/index.js","components/form/checksheet/index.js","components/form/index.js","components/share-this/index.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","cycle","arr","MyLineChart","state","this","props","colors","keys","colorCycle","Array","from","colorsByKey","forEach","key","next","value","data","max","datum","Object","entries","_val","val","Number","point","setState","activePoint","content","className","style","paddingBottom","payload","timestamp","color","fill","dataKey","isAnimationActive","itemSorter","item","name","getColors","margin","top","right","left","bottom","height","wrapperStyle","overflow","verticalAlign","stroke","domain","scale","getMaxValue","getTooltip","map","idx","activeDot","onMouseOver","onDotEnter","bind","onMouseOut","onDotLeave","dot","strokeWidth","type","React","Component","CheckSheet","visible","activeTab","options","option","selectedValues","onClickTab","handleInputChange","onSubmit","clearSelections","e","preventDefault","locations","filter","event","target","checked","evnt","dataset","optionsByName","sort","a","b","localeCompare","startsWith","numSections","split","length","push","heading","containerClassName","getOptionsByName","onClick","title","data-name","onChange","Form","locationSelectedValues","periodSelectedValue","scaleSelectedValue","periodOptions","makePeriodOption","locationOptions","makeOptions","scaleOptions","onPeriodChange","opt","onScaleChange","onLocationChange","period","selectedLocations","load","component","product","config","enabled","JSON","parse","stringify","_onShareThisLoaded","onShareThisLoaded","onload","complete","id","Date","now","buttons","current","__sharethis__","document","getElementById","script","createElement","setAttribute","params","property","source","query","join","src","async","body","appendChild","InlineShareButtons","createRef","ref","ShareThis","url","element","alignment","font_size","labels","language","networks","padding","radius","size","getElementsByClassName","root","ReactDOM","createPortal","App","confirmed","header","rows","deaths","allLocations","loading","paramString","search","indexOf","replace","decodeURIComponent","deserializedState","queryString","parseNumbers","arrayFormat","arrayFormatSeparator","undefined","loc","encodeURIComponent","initialState","getDeserializedState","Promise","all","fetch","then","response","text","parseRawData","formatJHURows","formatNYTRows","mergeFormattedData","assign","navigate","updateState","configuration","newState","seriesKey","offset","slice","_location","history","getSerializedState","getLastValue","sortedLocations","lastDatum","every","x","summaryData","makeSummary","href","makeName","country","county","rawData","Papa","_rows","timestamps","row","byCounty","confirmedIndex","deathsIndex","makeLocationName","timestampSet","Set","locationSet","moment","format","add","tsIndexes","ts","tsIndex","series","jhuDeaths","jhuConfirmed","nytStates","nytCounties","startEndTimestamps","start","end","reduce","accum_start","accum_end","next_start","next_end","maxStart","maxEnd","offsets","diff","zip","startOffset","endOffset","ii","shift","group","values","lastTimestamp","maxTimestamps","deathsData","confirmedData","lambda","render","StrictMode","exact","path","to","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3fade58d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const cycle = function* (arr) {\n  while (true) yield* arr;\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  CartesianGrid,\n  Legend,\n  Line,\n  LineChart,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport {cycle} from 'utils';\n\nimport './index.css';\n\nexport default class MyLineChart extends React.Component {\n  static propTypes = {\n    data: PropTypes.array.isRequired,\n    keys: PropTypes.array.isRequired,\n    scale: PropTypes.string.isRequired,\n    colors: PropTypes.array.isRequired,\n  };\n\n  constructor() {\n    super();\n    this.state = {};\n  }\n\n  getColors() {\n    const {colors, keys} = this.props;\n    const colorCycle = cycle(Array.from(colors))\n    const colorsByKey = {};\n    keys.forEach(key => colorsByKey[key] = colorCycle.next().value);\n    return colorsByKey;\n  }\n\n  getMaxValue(data) {\n    let max = 0;\n    data.forEach(datum => {\n      Object.entries(datum).forEach(([key, _val]) => {\n        if (key === 'timestamp') {\n          return;\n        }\n        const val = Number(_val);\n        if (val > max) {\n          max = val;\n        }\n      });\n    });\n    return max;\n  }\n\n  onDotEnter(point) {\n    this.setState({\n      activePoint: point,\n    });\n  }\n\n  onDotLeave() {\n    this.setState({\n      activePoint: null,\n    });\n  }\n\n  getTooltip() {\n    const {activePoint} = this.state;\n    if (activePoint) {\n      return (\n        <Tooltip content={() => {\n            return (\n              <div className={'MyLineChart--custom-tooltip'}>\n                <div style={{paddingBottom: '4px'}}>\n                  {activePoint.payload.timestamp}\n                </div>\n                <span style={{color: activePoint.fill}}>\n                  {activePoint.dataKey}: {activePoint.value}\n                </span>\n              </div>\n            );\n          }}\n        />\n      );\n    }\n    return (\n      <Tooltip\n        isAnimationActive={true}\n        itemSorter={\n          item => Number(item.payload[item.name]) * -1\n        } />\n    );\n  }\n\n  render() {\n    const {data, keys} = this.props;\n    const colorsByKey = this.getColors();\n    return (\n      <div className={'MyLineChart'}>\n        <ResponsiveContainer>\n          <LineChart\n            data={data}\n            margin={{\n              top: 5,\n              right: 20,\n              left: 10,\n              bottom: 5,\n            }}>\n            <Legend\n              height={100}\n              wrapperStyle={{paddingBottom: '10px', overflow: 'scroll'}}\n              verticalAlign={'top'} />\n            <CartesianGrid\n              stroke={'#f5f5f5'} />\n            <XAxis\n              dataKey={'timestamp'} />\n            <YAxis\n              domain={[\n                this.props.scale === 'log' ? 'auto' : 0,\n                this.getMaxValue(data)\n              ]}\n              scale={this.props.scale}\n            />\n            {this.getTooltip()}\n            {keys.map((key, idx) => (\n              <Line\n                activeDot={{\n                  onMouseOver:this.onDotEnter.bind(this),\n                  onMouseOut:this.onDotLeave.bind(this),\n                }}\n                dataKey={key}\n                dot={false}\n                key={key}\n                stroke={colorsByKey[key]}\n                strokeWidth={2}\n                type={'monotone'} />\n             ))}\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n    );\n  }\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.css';\n\nexport default class CheckSheet extends React.Component {\n  static propTypes = {\n    heading: PropTypes.string.isRequired,\n    options: PropTypes.array.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    selectedValues: PropTypes.array.isRequired,\n  }\n\n  constructor(props) {\n    super(props);\n\n    const state = {\n      visible: false,\n      activeTab: 'countries',\n    };\n    props.options.forEach(option => state[option.key] = false);\n    props.selectedValues.forEach(value => state[value] = true);\n\n    this.state = state;\n\n    this.onClickTab = this.onClickTab.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.clearSelections = this.clearSelections.bind(this);\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n\n    const visible = !this.state.visible;\n    if (!visible) {\n      const locations = Object.entries(this.state)\n        .filter(([name, val]) => val && name !== 'visible' && name !== 'activeTab')\n        .map(([name, val]) => name)\n      this.props.onSubmit(locations);\n    }\n\n    this.setState({\n      visible,\n    });\n  }\n\n  clearSelections() {\n    const state = {};\n    this.props.options.forEach(option => state[option.key] = false);\n    this.setState(state);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const name = target.name;\n    const value = target.checked;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  onClickTab(evnt) {\n    this.setState({\n      activeTab: evnt.target.dataset.name,\n    });\n  }\n\n  getOptionsByName(options) {\n    const optionsByName = {\n      'countries': [],\n      'states': [],\n      'counties': [],\n    };\n    const sortedOptions = options.sort((a, b) => a.key.localeCompare(b.key));\n    sortedOptions.forEach(option => {\n      const {key} = option;\n\n      if (!key) {\n        return;\n      }\n\n      if ((key === 'US') || !key.startsWith('US')) {\n        optionsByName['countries'].push(option);\n      } else {\n        const numSections = key.split(' - ').length;\n        if (numSections === 2) {\n          optionsByName['states'].push(option);\n        } else if (numSections === 3) {\n          optionsByName['counties'].push(option);\n        }\n      }\n    });\n    return optionsByName;\n  }\n\n  render() {\n    const {\n      heading,\n      options,\n    } = this.props;\n\n    const {\n      activeTab,\n      visible,\n    } = this.state;\n\n    const hiddenClassName = 'CheckSheet--hidden';\n\n    const containerClassName = visible ? '' : hiddenClassName;\n\n    const optionsByName = this.getOptionsByName(options);\n\n    return (\n      <div className={'CheckSheet'}>\n        <div className={'clearfix'}>\n          <div className={'left'}>\n            <div className={'CheckSheet-heading'}>{heading}</div>\n          </div>\n          <div className={'right'}>\n            <button onClick={this.onSubmit}>\n              {visible ? 'Update' : 'Select Locations'}\n            </button>\n\n            {visible ? (\n              <button className={'clear-button'} onClick={this.clearSelections}>\n                Clear selections\n              </button>\n            ) : null}\n          </div>\n        </div>\n        <div className={containerClassName}>\n          <div className={'center'}>\n            <div className={'CheckSheet-tab-bar'}>\n              {\n                [\n                  ['countries', 'Countries / Provinces'],\n                  ['states', 'U.S. States / Territories'],\n                  ['counties', 'U.S. Counties'],\n                ].map(([name, title]) => (\n                  <span\n                    className={`\n                      CheckSheet-tab\n                      ${name === activeTab ? 'CheckSheet-tab--active' : ''}\n                    `}\n                    data-name={name}\n                    onClick={this.onClickTab}\n                    key={`CheckSheet-tab-${name}`}>\n                    {title}\n                  </span>\n                ))\n              }\n            </div>\n          </div>\n          <div className={`\n            CheckSheet-sheet-container\n            ${activeTab === 'counties' ? 'CheckSheet--two-cols' : ''}\n          `}>\n            {\n              ['countries', 'states', 'counties'].map(name => (\n                <div\n                  className={`\n                    CheckSheet-sheet\n                    ${name === activeTab ? '' : hiddenClassName}\n                  `}\n                  key={`CheckSheet-sheet-${name}`}>\n                  {optionsByName[name].map(option => (\n                    <label key={option.key}>\n                      <input\n                        checked={this.state[option.key]}\n                        name={option.key}\n                        onChange={this.handleInputChange}\n                        type={'checkbox'} />\n                      {option.key}\n                    </label>\n                   ))}\n                </div>\n              ))\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport CheckSheet from './checksheet';\n\nimport './index.css';\n\nexport default class Form extends React.Component {\n  static propTypes = {\n    keys: PropTypes.array.isRequired,\n    locationSelectedValues: PropTypes.array.isRequired,\n    periodSelectedValue: PropTypes.number.isRequired,\n    scaleSelectedValue: PropTypes.string.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      locationSelectedValues: props.locationSelectedValues,\n      periodSelectedValue: props.periodSelectedValue,\n      scaleSelectedValue: props.scaleSelectedValue,\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  makeOptions(keys) {\n    return keys.map(key => ({key}));\n  }\n\n  makePeriodOption(value) {\n    let key = 'All time';\n    if (value !== 0) {\n      key = `Last ${value} days`;\n    }\n    return {\n      key,\n      value,\n    };\n  }\n\n  render() {\n    const periodOptions = [3,7,10,14,21,30,60,0].map(this.makePeriodOption);\n    const locationOptions = this.makeOptions(this.props.keys);\n    const scaleOptions = this.makeOptions(['log', 'linear']);\n    return (\n      <div>\n        <div>\n          <div className={'clearfix'}>\n            <div className={'left'}>\n              <span>{'Period'}</span>\n            </div>\n            <div className={'period-selector right'}>\n              <select\n                onChange={(evnt) => this.onPeriodChange(evnt)}\n                value={this.state.periodSelectedValue}>\n                {periodOptions.map(opt => (\n                  <option key={opt.key} value={opt.value}>{opt.key}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </div>\n\n        <div>\n          <div className={'clearfix'}>\n            <div className={'left'}>\n              <span>{'Scale'}</span>\n            </div>\n            <div className={'scale-selector right'}>\n              {scaleOptions.map(option => (\n                <label key={option.key}>\n                  <input\n                    checked={option.key === this.state.scaleSelectedValue}\n                    name={'scale'}\n                    value={option.key}\n                    onChange={(evnt) => this.onScaleChange(evnt)}\n                    type={'radio'} />\n                  <span>{option.key}</span>\n                </label>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className={'location-selector'}>\n          <CheckSheet\n            heading={'Country / State'}\n            options={locationOptions}\n            onSubmit={(locationSelectedValues) => this.onLocationChange(locationSelectedValues)}\n            selectedValues={this.props.locationSelectedValues}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  onLocationChange(locationSelectedValues) {\n    this.setState({locationSelectedValues}, this.onSubmit)\n  }\n\n  onPeriodChange(evnt) {\n    this.setState({periodSelectedValue: Number(evnt.target.value)}, this.onSubmit);\n  }\n\n  onScaleChange(evnt) {\n    this.setState({scaleSelectedValue: evnt.target.value}, this.onSubmit);\n  }\n\n  onSubmit() {\n    this.props.onSubmit({\n      scale: this.state.scaleSelectedValue,\n      period: this.state.periodSelectedValue,\n      selectedLocations: this.state.locationSelectedValues,\n    });\n  }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\n//import {InlineShareButtons} from 'sharethis-reactjs';\n//\n// NOTE - this is c/p from sharethis-reactjs package,\n// which wasn't updating (had to add componentDidUpdate method, see below)\n\n// load project wrapper\nconst load = function(component, product) {\n\n  // load config\n  let config = component.props.config || {enabled: true};\n  config = JSON.parse(JSON.stringify(config));\n\n  // load buttons\n  const _onShareThisLoaded = window.onShareThisLoaded;\n  let onload = () => {\n    if (!onload.complete) {\n      if (!config.id) {\n        const id = 'sharethis-' + Date.now();\n        config.id = id;\n      }\n      if (component.buttons.current) {\n        component.buttons.current.id = config.id;\n        window.__sharethis__.load(product, config);\n      }\n      if (_onShareThisLoaded) {\n        _onShareThisLoaded();\n      }\n      onload.complete = true;\n    }\n  };\n  window.onShareThisLoaded = onload;\n\n  // load sharethis.js\n  if (document.getElementById('sharethis-js')) {\n    if (window.__sharethis__) {\n      window.onShareThisLoaded();\n    }\n  } else {\n    const script = document.createElement(\"script\");\n    script.setAttribute('id', 'sharethis-js');\n    const params = {\n      property: config.property || '',\n      product: product,\n      source: 'reactjs'\n    }\n    const query = Object.keys(params).map(key => key + '=' + params[key]).join('&');\n    script.src = \"https://platform-api.sharethis.com/js/sharethis.js?\" + query;\n    script.async = true;\n    document.body.appendChild(script);\n  }\n}\n\nclass InlineShareButtons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.buttons = React.createRef();\n  }\n\n  componentDidMount() {\n    load(this, 'inline-share-buttons');\n  }\n\n  componentDidUpdate() {\n    load(this, 'inline-share-buttons');\n  }\n\n  render () {\n    return (\n      <div ref={this.buttons} />\n    );\n  }\n};\n\nexport default function ShareThis({url}) {\n  const element = (\n    <div className={'ShareThis'}>\n      <InlineShareButtons\n        config={{\n          alignment: 'center',  // alignment of buttons (left, center, right)\n          color: 'social',      // set the color of buttons (social, white)\n          enabled: true,        // show/hide buttons (true, false)\n          font_size: 16,        // font size for the buttons\n          labels: 'cta',        // button labels (cta, counts, null)\n          language: 'en',       // which language to use (see LANGUAGES)\n          networks: [           // which networks to include (see SHARING NETWORKS)\n            'facebook',\n            'messenger',\n            'twitter',\n            'sms',\n            'email',\n            'whatsapp',\n            'reddit',\n            'print',\n          ],\n          padding: 12,          // padding within buttons (INTEGER)\n          radius: 4,            // the corner radius on each button (INTEGER)\n          size: 40,             // the size of each button (INTEGER)\n\n          // OPTIONAL PARAMETERS\n          url: url,\n          //description: 'custom text',       // (defaults to og:description or twitter:description)\n          //title: 'custom title',            // (defaults to og:title or twitter:title)\n          //message: 'custom email text',     // (only for email sharing)\n          //subject: 'custom email subject',  // (only for email sharing)\n          //username: 'custom twitter handle' // (only for twitter sharing)\n        }}\n      />\n    </div>\n  );\n  const portals = Array.from(document.getElementsByClassName('share-this-root'))\n    .map(root => ReactDOM.createPortal(element, root));\n  return portals;\n}\n\n","import React from 'react';\n\nimport moment from 'moment';\nimport Papa from 'papaparse';\nimport queryString from 'query-string';\nimport zip from 'lodash.zip';\n\nimport Chart from './components/line-chart';\nimport Form from './components/form';\nimport ShareThis from './components/share-this';\nimport {cycle} from 'utils';\n\nimport './App.css';\n\nconst JHU_DEATHS = \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv\";\nconst JHU_CONFIRMED = \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\";\nconst NYT_COUNTIES = \"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv\";\nconst NYT_STATES = \"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv\";\n\nconst colors =[\n  'red',\n  'orange',\n  'green',\n  'blue',\n  'purple',\n  'violet',\n  '#3b3b3b',\n];\nconst colorCycle = cycle(Array.from(colors));\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      confirmed: {\n        header: null,\n        rows: {},\n        data: [],\n      },\n      deaths: {\n        header: null,\n        rows: {},\n        data: [],\n      },\n      allLocations: [],\n      selectedLocations: [\n        'Italy',\n        'Spain',\n        'France',\n        'US',\n        'China - Hubei',\n      ],\n      period: 0,\n      scale: 'log',\n      loading: true,\n    }\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  getDeserializedState(props) {\n    const {search} = props.location;\n    let paramString;\n    if (search.indexOf('|') > -1) {\n      paramString = search.replace(/--/g, ' - ').replace(/_/g, ' ');\n    } else {\n      paramString = decodeURIComponent(search).replace(/--/g, ' - ').replace(/_/g, ' ');\n    }\n    if (paramString) {\n      const deserializedState = {};\n      const params = queryString.parse(paramString, {\n        parseNumbers: true,\n        arrayFormat: 'separator',\n        arrayFormatSeparator: '|',\n      });\n      const {\n        period,\n        scale,\n        locations,\n      } = params;\n      if (period !== undefined) {\n        deserializedState.period = period;\n      }\n      if (scale !== undefined) {\n        deserializedState.scale = scale;\n      }\n      if (locations !== undefined) {\n        if (typeof locations === 'string') {\n          deserializedState.selectedLocations = [locations];\n        } else {\n          deserializedState.selectedLocations = locations;\n        }\n      } else {\n        deserializedState.selectedLocations = [];\n      }\n      return deserializedState;\n    }\n  }\n\n  getSerializedState(state) {\n    const locations = state.selectedLocations.map(loc => loc.replace(/ - /g, '--').replace(/ /g, '_'));\n    return '?' + encodeURIComponent(queryString.stringify({\n      period: state.period,\n      scale: state.scale,\n      locations,\n    }, {\n      arrayFormat: 'separator',\n      arrayFormatSeparator: '|',\n    }));\n  }\n\n  componentDidMount() {\n    const initialState = this.getDeserializedState(this.props) || {};\n    getData().then(data =>\n      this.setState(Object.assign(data, initialState), () =>\n        this.navigate(this.state)\n      ));\n  }\n\n  componentWillReceiveProps(props) {\n    const initialState = this.getDeserializedState(props);\n    this.updateState(initialState);\n  }\n\n  updateState(configuration) {\n    const newState = {\n      ...this.state,\n      ...configuration,\n      ...{loading: false},\n    };\n\n    const {\n      period,\n      selectedLocations,\n    } = newState;\n\n    ['deaths', 'confirmed'].forEach(seriesKey => {\n      const {header, rows} = newState[seriesKey];\n\n      let offset = 0;\n      if (period !== 0) {\n        offset = header.length - period;\n      }\n      const timestamps = header.slice(offset);\n\n      const data = timestamps.map((timestamp, idx) => {\n        const datum = {\n          timestamp,\n        };\n        selectedLocations.forEach(_location => {\n          datum[_location] = rows[_location][offset + idx];\n        });\n        return datum;\n      });\n\n      newState[seriesKey] = {\n        data,\n        header,\n        rows,\n      };\n    });\n    this.setState(newState);\n  };\n\n  onSubmit(configuration) {\n    this.navigate(configuration);\n  }\n\n  navigate(configuration) {\n    this.props.history.push(this.getSerializedState(configuration))\n  }\n\n  makeSummary(locations, deaths, confirmed) {\n    if (!(deaths.data.length && confirmed.data.length)) {\n      return [];\n    }\n\n    return locations.map(_location => {\n      const deathCount = getLastValue(deaths.rows[_location]);\n      const confirmedCount = getLastValue(confirmed.rows[_location]);\n      return [_location, deathCount, confirmedCount];\n    });\n  }\n\n  render() {\n    const {\n      confirmed,\n      deaths,\n      allLocations,\n      selectedLocations,\n      period,\n      scale,\n      loading,\n    } = this.state;\n\n    let sortedLocations = selectedLocations;\n    if (deaths.data.length) {\n      const lastDatum = getLastValue(\n        deaths.data,\n        (datum) => selectedLocations.map(loc => datum[loc]).every(x => x !== undefined)\n      );\n      sortedLocations = selectedLocations\n        .sort((a, b) => Number(lastDatum[b]) - Number(lastDatum[a]))\n    }\n\n    const summaryData = this.makeSummary(sortedLocations, deaths, confirmed);\n\n    if (loading) {\n      return null;\n    }\n\n    return (\n      <div className=\"App\">\n        <ShareThis url={window.location.href} />\n        <span className={'App-Header h1'}>The Coronavirus Curve</span>\n        <div className=\"content\">\n          <div className={'App-Form'}>\n            <Form\n              periodSelectedValue={period}\n              locationSelectedValues={selectedLocations}\n              scaleSelectedValue={scale}\n              keys={allLocations}\n              onSubmit={this.onSubmit} />\n          </div>\n\n          <span className=\"App-Header h2\">Deaths</span>\n          <div className={'App-Chart-container'}>\n            <div>\n              <Chart\n                colors={colors}\n                data={deaths.data}\n                keys={sortedLocations}\n                scale={scale} />\n            </div>\n          </div>\n\n          <div className={'spacer'}></div>\n\n          <span className=\"App-Header h2\">Confirmed Cases</span>\n          <div className={'App-Chart-container'}>\n            <div>\n              <Chart\n                colors={colors}\n                data={confirmed.data}\n                keys={sortedLocations}\n                scale={scale} />\n            </div>\n          </div>\n\n          <div className={'spacer'}></div>\n\n          <span className=\"App-Header h2\">Summary</span>\n          <div className={'App-SummaryTable-container'}>\n            <div className={'App-SummaryTable'}>\n              <div>\n                <span></span>\n                <span>Deaths</span>\n                <span>Confirmed Cases</span>\n              </div>\n              <div>\n                {summaryData.map(([_location, deaths, confirmed]) => (\n                  <div\n                    key={`summaryData--${_location}`}\n                    style={{color: colorCycle.next().value}}>\n                    <span>{_location}</span>\n                    <span>{deaths}</span>\n                    <span>{confirmed}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <div className={'spacer'}></div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction makeName(country, state, county) {\n  if (country && state && county) {\n    return `${country} - ${state} - ${county}`\n  } else if (country && state) {\n    return `${country} - ${state}`\n  } else if (country) {\n    return country;\n  } else if (state) {\n    return state;\n  }\n  return '';\n}\n\nfunction parseRawData(rawData) {\n  return Papa.parse(rawData).data;\n}\n\nfunction formatJHURows(_rows) {\n  const data = {};\n\n  const header = _rows[0];\n  const rows = _rows.slice(1);\n  const timestamps = header.slice(4);\n\n  for (const row of rows) {\n    const _location = makeName(row[1], row[0]);\n    data[_location] = row.slice(4);\n  }\n\n  return {timestamps, data};\n}\n\nfunction formatNYTRows(_rows, byCounty = false) {\n  const deaths = {};\n  const confirmed = {};\n\n  const rows = _rows.slice(1)\n\n  const confirmedIndex = byCounty ? 4: 3;\n  const deathsIndex = byCounty ? 5: 4;\n  const makeLocationName = byCounty ?\n    (row) => makeName('US', row[2], row[1]) :\n    (row) => makeName('US', row[1]);\n\n  // create sets of timestamps, locations\n  // reformat row timestamp, location\n  const timestampSet = new Set();\n  const locationSet = new Set();\n  for (const row of rows) {\n    const timestamp = moment(row[0], 'YYYY-MM-DD').format('M/DD/YY');\n    timestampSet.add(timestamp);\n    row[0] = timestamp;\n\n    const _location = makeLocationName(row);\n    locationSet.add(_location);\n    row[1] = _location;\n  }\n\n  // initialize empty ts series for each location, for both death and confirmed\n  const timestamps = Array.from(timestampSet)\n    .sort((a, b) => a.localeCompare(b))\n\n  for (const _location of locationSet) {\n    deaths[_location] = Array.from({length: timestamps.length}, x => '');\n    confirmed[_location] = Array.from({length: timestamps.length}, x => '');\n  }\n\n  // index timestamps for faster lookup (than indexOf)\n  const tsIndexes = {};\n  timestamps.forEach((ts, idx) => tsIndexes[ts] = idx)\n\n  // loop through all rows, build up data\n  for (const row of rows) {\n    const timestamp = row[0];\n    const _location = row[1];\n\n    const tsIndex = tsIndexes[timestamp];\n\n    confirmed[_location][tsIndex] = row[confirmedIndex];\n    deaths[_location][tsIndex] = row[deathsIndex];\n  }\n\n  return {timestamps, deaths, confirmed};\n}\n\nfunction mergeFormattedData(series) {\n  const [jhuDeaths, jhuConfirmed, nytStates, nytCounties] = series;\n  const startEndTimestamps = series\n    .map(({timestamps}) => [timestamps[0], timestamps[timestamps.length-1]])\n    .map(([start, end]) => [moment(start), moment(end)])\n\n  const [maxStart, maxEnd] = startEndTimestamps\n    .reduce(([accum_start, accum_end], [next_start, next_end]) =>\n      [\n        moment.max(accum_start, next_start),\n        moment.max(accum_end, next_end)\n      ]\n    )\n\n  const offsets = startEndTimestamps.map(([start, end]) =>\n    [maxStart.diff(start, 'days'), maxEnd.diff(end, 'days')]\n  )\n\n  for (const [{timestamps, deaths, confirmed}, [startOffset, endOffset]] of zip(series, offsets)) {\n    // remove timestamps/values that precede max start\n    for (let ii = 0; ii < startOffset; ii++) {\n      timestamps.shift();\n    }\n    [deaths, confirmed].filter(x => x).forEach(group =>\n      Object.values(group).forEach(row => {\n        for (let ii = 0; ii < startOffset; ii++) {\n          row.shift();\n        }\n      })\n    )\n\n    // add timestamps and null values for series ending before max end\n    const lastTimestamp = moment(timestamps[timestamps.length-1])\n    for (let ii = 0; ii < startOffset; ii++) {\n      timestamps.push(lastTimestamp.add(1, 'days').format('M/DD/YY'))\n    }\n    [deaths, confirmed].filter(x => x).forEach(group =>\n      Object.values(group).forEach(row => {\n        for (let ii = 0; ii < endOffset; ii++) {\n          row.push(undefined);\n        }\n      })\n    )\n  }\n  const maxTimestamps = series[0].timestamps;\n\n  const deathsData = {\n    ...jhuDeaths.data,\n    ...nytStates.deaths,\n    ...nytCounties.deaths,\n  };\n  const confirmedData = {\n    ...jhuConfirmed.data,\n    ...nytStates.confirmed,\n    ...nytCounties.confirmed,\n  };\n\n  const allLocations = Object.keys(deathsData);\n\n  const deaths = {\n    rows: deathsData,\n    header: maxTimestamps,\n    data: [],\n  };\n  const confirmed = {\n    rows: confirmedData,\n    header: maxTimestamps,\n    data: [],\n  };\n  return {\n    allLocations,\n    deaths,\n    confirmed,\n  }\n};\n\nfunction getData() {\n  return Promise.all(\n    [\n      (\n        window.fetch(JHU_DEATHS)\n          .then(response => response.text())\n          .then(body => parseRawData(body))\n          .then(rows => formatJHURows(rows))\n      ),\n      (\n        window.fetch(JHU_CONFIRMED)\n          .then(response => response.text())\n          .then(body => parseRawData(body))\n          .then(rows => formatJHURows(rows))\n      ),\n      (\n        window.fetch(NYT_STATES)\n          .then(response => response.text())\n          .then(body => parseRawData(body))\n          .then(rows => formatNYTRows(rows))\n      ),\n      (\n        window.fetch(NYT_COUNTIES)\n          .then(response => response.text())\n          .then(body => parseRawData(body))\n          .then(rows => formatNYTRows(rows, true))\n      ),\n    ]).then(mergeFormattedData);\n}\n\nfunction getLastValue(row, lambda=(val) => val !== undefined) {\n  let value;\n  let offset = 1;\n  while (true) {\n    value = row[row.length - offset];\n    if (lambda(value)) {\n      break;\n    }\n    offset += 1;\n  }\n  return value;\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from \"react-router-dom\";\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Switch>\n        <Route exact path={'/'} component={App} />\n        <Redirect to={'/'} />\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}