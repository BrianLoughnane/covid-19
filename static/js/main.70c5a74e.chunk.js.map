{"version":3,"sources":["serviceWorker.js","utils/index.js","components/line-chart/index.js","components/form/checksheet/index.js","components/form/index.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","cycle","arr","MyLineChart","state","this","props","colors","data","keys","lastDatum","length","colorCycle","Array","from","colorsByKey","sort","a","b","Number","forEach","key","next","value","max","datum","Object","entries","_val","val","point","setState","activePoint","content","className","style","paddingBottom","payload","timestamp","color","fill","dataKey","isAnimationActive","itemSorter","item","name","getColors","margin","top","right","left","bottom","wrapperStyle","verticalAlign","stroke","domain","scale","getMaxValue","getTooltip","map","idx","activeDot","onMouseOver","onDotEnter","bind","onMouseOut","onDotLeave","dot","strokeWidth","type","React","Component","defaultProps","CheckSheet","visible","activeTab","options","option","selectedValues","onClickTab","handleInputChange","onSubmit","clearSelections","e","preventDefault","locations","filter","event","target","checked","evnt","dataset","optionsByName","localeCompare","startsWith","numSections","split","push","heading","containerClassName","getOptionsByName","onClick","title","data-name","onChange","Form","locationSelectedValues","periodSelectedValue","scaleSelectedValue","periodOptions","makePeriodOption","locationOptions","makeOptions","scaleOptions","onPeriodChange","opt","onScaleChange","onLocationChange","period","selectedLocations","App","confirmed","header","rows","deaths","allLocations","loading","paramString","search","replace","deserializedState","params","queryString","parse","parseNumbers","arrayFormat","arrayFormatSeparator","undefined","loc","stringify","initialState","getDeserializedState","Promise","all","fetch","then","response","text","body","parseRawData","formatJHURows","formatNYTRows","mergeFormattedData","assign","navigate","updateState","configuration","newState","seriesKey","offset","slice","history","getSerializedState","href","src","frameBorder","allow","allowFullScreen","makeName","country","county","rawData","Papa","_rows","timestamps","row","byCounty","confirmedIndex","deathsIndex","makeLocationName","timestampSet","Set","locationSet","moment","format","add","x","tsIndexes","ts","tsIndex","series","jhuDeaths","jhuConfirmed","nytStates","nytCounties","startEndTimestamps","start","end","reduce","accum_start","accum_end","next_start","next_end","maxStart","maxEnd","offsets","diff","zip","startOffset","endOffset","ii","shift","group","values","lastTimestamp","maxTimestamps","deathsData","confirmedData","ReactDOM","render","StrictMode","exact","path","component","to","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.70c5a74e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const cycle = function* (arr) {\n  while (true) yield* arr;\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  CartesianGrid,\n  Legend,\n  Line,\n  LineChart,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport {cycle} from 'utils';\n\nimport './index.css';\n\nexport default class MyLineChart extends React.Component {\n  static propTypes = {\n    data: PropTypes.array.isRequired,\n    keys: PropTypes.array.isRequired,\n    scale: PropTypes.string.isRequired,\n    colors: PropTypes.array,\n  };\n\n  static defaultProps = {\n    colors: [\n      'red',\n      'orange',\n      'green',\n      'blue',\n      'purple',\n      'violet',\n      '#3b3b3b',\n    ],\n  };\n\n  constructor() {\n    super();\n    this.state = {};\n  }\n\n  getColors() {\n    const {colors, data, keys} = this.props;\n    const lastDatum = data[data.length - 1];\n    const colorCycle = cycle(Array.from(colors))\n    const colorsByKey = {};\n    keys\n      .sort((a, b) => Number(lastDatum[a]) - Number(lastDatum[b]))\n      .forEach( key => colorsByKey[key] = colorCycle.next().value);\n    return colorsByKey;\n  }\n\n  getMaxValue(data) {\n    let max = 0;\n    data.forEach(datum => {\n      Object.entries(datum).forEach(([key, _val]) => {\n        if (key === 'timestamp') {\n          return;\n        }\n        const val = Number(_val);\n        if (val > max) {\n          max = val;\n        }\n      });\n    });\n    return max;\n  }\n\n  onDotEnter(point) {\n    this.setState({\n      activePoint: point,\n    });\n  }\n\n  onDotLeave() {\n    this.setState({\n      activePoint: null,\n    });\n  }\n\n  getTooltip() {\n    const {activePoint} = this.state;\n    if (activePoint) {\n      return (\n        <Tooltip content={() => {\n            return (\n              <div className={'MyLineChart--custom-tooltip'}>\n                <div style={{paddingBottom: '4px'}}>\n                  {activePoint.payload.timestamp}\n                </div>\n                <span style={{color: activePoint.fill}}>\n                  {activePoint.dataKey}: {activePoint.value}\n                </span>\n              </div>\n            );\n          }}\n        />\n      );\n    }\n    return (\n      <Tooltip\n        isAnimationActive={true}\n        itemSorter={\n          item => Number(item.payload[item.name]) * -1\n        } />\n    );\n  }\n\n  render() {\n    const {data, keys} = this.props;\n    const colorsByKey = this.getColors();\n    return (\n      <div className={'MyLineChart'}>\n        <ResponsiveContainer>\n          <LineChart\n            data={data}\n            margin={{\n              top: 5,\n              right: 20,\n              left: 10,\n              bottom: 5,\n            }}>\n            <Legend\n              wrapperStyle={{paddingBottom: '10px'}}\n              verticalAlign={'top'} />\n            <CartesianGrid\n              stroke={'#f5f5f5'} />\n            <XAxis\n              dataKey={'timestamp'} />\n            <YAxis\n              domain={[\n                this.props.scale === 'log' ? 'auto' : 0,\n                this.getMaxValue(data)\n              ]}\n              scale={this.props.scale}\n            />\n            {this.getTooltip()}\n            {keys.map((key, idx) => (\n              <Line\n                activeDot={{\n                  onMouseOver:this.onDotEnter.bind(this),\n                  onMouseOut:this.onDotLeave.bind(this),\n                }}\n                dataKey={key}\n                dot={false}\n                key={key}\n                stroke={colorsByKey[key]}\n                strokeWidth={2}\n                type={'monotone'} />\n             ))}\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n    );\n  }\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.css';\n\nexport default class CheckSheet extends React.Component {\n  static propTypes = {\n    heading: PropTypes.string.isRequired,\n    options: PropTypes.array.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    selectedValues: PropTypes.array.isRequired,\n  }\n\n  constructor(props) {\n    super(props);\n\n    const state = {\n      visible: false,\n      activeTab: 'countries',\n    };\n    props.options.forEach(option => state[option.key] = false);\n    props.selectedValues.forEach(value => state[value] = true);\n\n    this.state = state;\n\n    this.onClickTab = this.onClickTab.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.clearSelections = this.clearSelections.bind(this);\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n\n    const visible = !this.state.visible;\n    if (!visible) {\n      const locations = Object.entries(this.state)\n        .filter(([name, val]) => val && name !== 'visible' && name !== 'activeTab')\n        .map(([name, val]) => name)\n      this.props.onSubmit(locations);\n    }\n\n    this.setState({\n      visible,\n    });\n  }\n\n  clearSelections() {\n    const state = {};\n    this.props.options.forEach(option => state[option.key] = false);\n    this.setState(state);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const name = target.name;\n    const value = target.checked;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  onClickTab(evnt) {\n    this.setState({\n      activeTab: evnt.target.dataset.name,\n    });\n  }\n\n  getOptionsByName(options) {\n    const optionsByName = {\n      'countries': [],\n      'states': [],\n      'counties': [],\n    };\n    const sortedOptions = options.sort((a, b) => a.key.localeCompare(b.key));\n    sortedOptions.forEach(option => {\n      const {key} = option;\n\n      if (!key) {\n        return;\n      }\n\n      if ((key === 'US') || !key.startsWith('US')) {\n        optionsByName['countries'].push(option);\n      } else {\n        const numSections = key.split(' - ').length;\n        if (numSections === 2) {\n          optionsByName['states'].push(option);\n        } else if (numSections === 3) {\n          optionsByName['counties'].push(option);\n        }\n      }\n    });\n    return optionsByName;\n  }\n\n  render() {\n    const {\n      heading,\n      options,\n    } = this.props;\n\n    const {\n      activeTab,\n      visible,\n    } = this.state;\n\n    const hiddenClassName = 'CheckSheet--hidden';\n\n    const containerClassName = visible ? '' : hiddenClassName;\n\n    const optionsByName = this.getOptionsByName(options);\n\n    return (\n      <div className={'CheckSheet'}>\n        <div className={'clearfix'}>\n          <div className={'left'}>\n            <div className={'CheckSheet-heading'}>{heading}</div>\n          </div>\n          <div className={'right'}>\n            <button onClick={this.onSubmit}>\n              {visible ? 'Update' : 'Select Locations'}\n            </button>\n\n            {visible ? (\n              <button className={'clear-button'} onClick={this.clearSelections}>\n                Clear selections\n              </button>\n            ) : null}\n          </div>\n        </div>\n        <div className={containerClassName}>\n          <div className={'center'}>\n            <div className={'CheckSheet-tab-bar'}>\n              {\n                [\n                  ['countries', 'Countries / Provinces'],\n                  ['states', 'U.S. States / Territories'],\n                  ['counties', 'U.S. Counties'],\n                ].map(([name, title]) => (\n                  <span\n                    className={`\n                      CheckSheet-tab\n                      ${name === activeTab ? 'CheckSheet-tab--active' : ''}\n                    `}\n                    data-name={name}\n                    onClick={this.onClickTab}\n                    key={`CheckSheet-tab-${name}`}>\n                    {title}\n                  </span>\n                ))\n              }\n            </div>\n          </div>\n          <div className={`\n            CheckSheet-sheet-container\n            ${activeTab === 'counties' ? 'CheckSheet--two-cols' : ''}\n          `}>\n            {\n              ['countries', 'states', 'counties'].map(name => (\n                <div\n                  className={`\n                    CheckSheet-sheet\n                    ${name === activeTab ? '' : hiddenClassName}\n                  `}\n                  key={`CheckSheet-sheet-${name}`}>\n                  {optionsByName[name].map(option => (\n                    <label key={option.key}>\n                      <input\n                        checked={this.state[option.key]}\n                        name={option.key}\n                        onChange={this.handleInputChange}\n                        type={'checkbox'} />\n                      {option.key}\n                    </label>\n                   ))}\n                </div>\n              ))\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport CheckSheet from './checksheet';\n\nimport './index.css';\n\nexport default class Form extends React.Component {\n  static propTypes = {\n    keys: PropTypes.array.isRequired,\n    locationSelectedValues: PropTypes.array.isRequired,\n    periodSelectedValue: PropTypes.number.isRequired,\n    scaleSelectedValue: PropTypes.string.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      locationSelectedValues: props.locationSelectedValues,\n      periodSelectedValue: props.periodSelectedValue,\n      scaleSelectedValue: props.scaleSelectedValue,\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  makeOptions(keys) {\n    return keys.map(key => ({key}));\n  }\n\n  makePeriodOption(value) {\n    let key = 'All time';\n    if (value !== 0) {\n      key = `Last ${value} days`;\n    }\n    return {\n      key,\n      value,\n    };\n  }\n\n  render() {\n    const periodOptions = [3,7,10,14,21,30,60,0].map(this.makePeriodOption);\n    const locationOptions = this.makeOptions(this.props.keys);\n    const scaleOptions = this.makeOptions(['log', 'linear']);\n    return (\n      <div>\n        <div>\n          <div className={'clearfix'}>\n            <div className={'left'}>\n              <span>{'Period'}</span>\n            </div>\n            <div className={'period-selector right'}>\n              <select\n                onChange={(evnt) => this.onPeriodChange(evnt)}\n                value={this.state.periodSelectedValue}>\n                {periodOptions.map(opt => (\n                  <option key={opt.key} value={opt.value}>{opt.key}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </div>\n\n        <div>\n          <div className={'clearfix'}>\n            <div className={'left'}>\n              <span>{'Scale'}</span>\n            </div>\n            <div className={'scale-selector right'}>\n              {scaleOptions.map(option => (\n                <label key={option.key}>\n                  <input\n                    checked={option.key === this.state.scaleSelectedValue}\n                    name={'scale'}\n                    value={option.key}\n                    onChange={(evnt) => this.onScaleChange(evnt)}\n                    type={'radio'} />\n                  {option.key}\n                </label>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className={'location-selector'}>\n          <CheckSheet\n            heading={'Country / State'}\n            options={locationOptions}\n            onSubmit={(locationSelectedValues) => this.onLocationChange(locationSelectedValues)}\n            selectedValues={this.props.locationSelectedValues}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  onLocationChange(locationSelectedValues) {\n    this.setState({locationSelectedValues}, this.onSubmit)\n  }\n\n  onPeriodChange(evnt) {\n    this.setState({periodSelectedValue: Number(evnt.target.value)}, this.onSubmit);\n  }\n\n  onScaleChange(evnt) {\n    this.setState({scaleSelectedValue: evnt.target.value}, this.onSubmit);\n  }\n\n  onSubmit() {\n    this.props.onSubmit({\n      scale: this.state.scaleSelectedValue,\n      period: this.state.periodSelectedValue,\n      selectedLocations: this.state.locationSelectedValues,\n    });\n  }\n}\n\n","import React from 'react';\n\nimport moment from 'moment';\nimport Papa from 'papaparse';\nimport queryString from 'query-string';\nimport zip from 'lodash.zip';\n\nimport Chart from './components/line-chart';\nimport Form from './components/form';\n\nimport './App.css';\n\nconst JHU_DEATHS = \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv\";\nconst JHU_CONFIRMED = \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\";\nconst NYT_COUNTIES = \"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv\";\nconst NYT_STATES = \"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv\";\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      confirmed: {\n        header: null,\n        rows: [],\n        data: [],\n      },\n      deaths: {\n        header: null,\n        rows: [],\n        data: [],\n      },\n      allLocations: [],\n      selectedLocations: [\n        'Italy',\n        'Spain',\n        'France',\n        'US',\n        'China - Hubei',\n      ],\n      period: 0,\n      scale: 'log',\n      loading: true,\n    }\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  getDeserializedState(props) {\n    const paramString = props.location.search.replace(/--/g, ' - ').replace(/_/g, ' ');\n    if (paramString) {\n      const deserializedState = {};\n      const params = queryString.parse(paramString, {\n        parseNumbers: true,\n        arrayFormat: 'separator',\n        arrayFormatSeparator: '|',\n      });\n      const {\n        period,\n        scale,\n        locations,\n      } = params;\n      if (period !== undefined) {\n        deserializedState.period = period;\n      }\n      if (scale !== undefined) {\n        deserializedState.scale = scale;\n      }\n      if (locations !== undefined) {\n        if (typeof locations === 'string') {\n          deserializedState.selectedLocations = [locations];\n        } else {\n          deserializedState.selectedLocations = locations;\n        }\n      } else {\n        deserializedState.selectedLocations = [];\n      }\n      return deserializedState;\n    }\n  }\n\n  getSerializedState(state) {\n    const locations = state.selectedLocations.map(loc => loc.replace(/ - /g, '--').replace(/ /g, '_'));\n    return '?' + queryString.stringify({\n      period: state.period,\n      scale: state.scale,\n      locations,\n    }, {\n      arrayFormat: 'separator',\n      arrayFormatSeparator: '|',\n    })\n  }\n\n  componentDidMount() {\n    const initialState = this.getDeserializedState(this.props) || {};\n    getData().then(data =>\n      this.setState(Object.assign(data, initialState), () =>\n        this.navigate(this.state)\n      ));\n  }\n\n  componentWillReceiveProps(props) {\n    const initialState = this.getDeserializedState(props);\n    this.updateState(initialState);\n  }\n\n  updateState(configuration) {\n    const newState = {\n      ...this.state,\n      ...configuration,\n      ...{loading: false},\n    };\n\n    const {\n      period,\n      selectedLocations,\n    } = newState;\n\n    ['deaths', 'confirmed'].forEach(seriesKey => {\n      const {header, rows} = newState[seriesKey];\n\n      let offset = 0;\n      if (period !== 0) {\n        offset = header.length - period;\n      }\n      const timestamps = header.slice(offset);\n\n      const data = timestamps.map((timestamp, idx) => {\n        const datum = {\n          timestamp,\n        };\n        selectedLocations.forEach(location => {\n          datum[location] = rows[location][offset + idx];\n        });\n        return datum;\n      });\n\n      newState[seriesKey] = {\n        data,\n        header,\n        rows,\n      };\n    });\n    this.setState(newState);\n  };\n\n  onSubmit(configuration) {\n    this.navigate(configuration);\n  }\n\n  navigate(configuration) {\n    this.props.history.push(this.getSerializedState(configuration))\n  }\n\n  render() {\n    const {\n      confirmed,\n      deaths,\n      allLocations,\n      selectedLocations,\n      period,\n      scale,\n      loading,\n    } = this.state;\n\n    if (loading) {\n      return null;\n    }\n    return (\n      <div className=\"App\">\n        <div className=\"content\">\n          <h1 className=\"App-Header\">The Coronavirus Curve</h1>\n          <div className={'App-Form'}>\n            <Form\n              periodSelectedValue={period}\n              locationSelectedValues={selectedLocations}\n              scaleSelectedValue={scale}\n              keys={allLocations}\n              onSubmit={this.onSubmit} />\n          </div>\n\n          <h2 className=\"App-Header\">Deaths</h2>\n          <div className={'App-Chart-container'}>\n            <div>\n              <Chart\n                data={deaths.data}\n                keys={selectedLocations}\n                scale={scale} />\n            </div>\n          </div>\n\n          <div className={'spacer'}></div>\n\n          <h2 className=\"App-Header\">Confirmed Cases</h2>\n          <div className={'App-Chart-container'}>\n            <div>\n              <Chart\n                data={confirmed.data}\n                keys={selectedLocations}\n                scale={scale} />\n            </div>\n          </div>\n\n          <div className={'spacer'}></div>\n\n          <div className={'about'}>\n            <div>{'Data: '}</div>\n            <div><a href=\"https://github.com/CSSEGISandData/COVID-19\">Johns Hopkins CSSE</a></div>\n            <div>\n              <a href=\"https://github.com/nytimes/covid-19-data\">The New York Times</a>\n              {' (View the NYT data on their '}\n                <a href=\"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\">\n                  interactive tracking page\n                </a>\n              {')'}\n            </div>\n          </div>\n\n          <div className={'spacer'}></div>\n\n\n          <h2 className=\"App-Header\">Understanding the Data</h2>\n          <div className={'spacer'}></div>\n          <div className={'center video-wrapper'}>\n            <div className={'center video-container'}>\n              <iframe\n                src=\"https://www.youtube.com/embed/Kas0tIxDvrg\"\n                frameBorder=\"0\"\n                title=\"Understanding the data\"\n                allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                allowFullScreen>\n              </iframe>\n            </div>\n          </div>\n\n          <div className={'spacer'}></div>\n\n          <div className={'about'}>\n            {'Credit: '}\n            <a href=\"https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw\">3Blue1Brown</a>\n          </div>\n\n          <div className={'spacer'}></div>\n\n          <div className={'footer'}></div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction makeName(country, state, county) {\n  if (country && state && county) {\n    return `${country} - ${state} - ${county}`\n  } else if (country && state) {\n    return `${country} - ${state}`\n  } else if (country) {\n    return country;\n  } else if (state) {\n    return state;\n  }\n  return '';\n}\n\nfunction parseRawData(rawData) {\n  return Papa.parse(rawData).data;\n}\n\nfunction formatJHURows(_rows) {\n  const data = {};\n\n  const header = _rows[0];\n  const rows = _rows.slice(1);\n  const timestamps = header.slice(4);\n\n  for (const row of rows) {\n    const location = makeName(row[1], row[0]);\n    data[location] = row.slice(4);\n  }\n\n  return {timestamps, data};\n}\n\nfunction formatNYTRows(_rows, byCounty = false) {\n  const deaths = {};\n  const confirmed = {};\n\n  const rows = _rows.slice(1)\n\n  const confirmedIndex = byCounty ? 4: 3;\n  const deathsIndex = byCounty ? 5: 4;\n  const makeLocationName = byCounty ?\n    (row) => makeName('US', row[2], row[1]) :\n    (row) => makeName('US', row[1]);\n\n  // create sets of timestamps, locations\n  // reformat row timestamp, location\n  const timestampSet = new Set();\n  const locationSet = new Set();\n  for (const row of rows) {\n    const timestamp = moment(row[0], 'YYYY-MM-DD').format('M/DD/YY');\n    timestampSet.add(timestamp);\n    row[0] = timestamp;\n\n    const location = makeLocationName(row);\n    locationSet.add(location);\n    row[1] = location;\n  }\n\n  // initialize empty ts series for each location, for both death and confirmed\n  const timestamps = Array.from(timestampSet)\n    .sort((a, b) => a.localeCompare(b))\n\n  for (const location of locationSet) {\n    deaths[location] = Array.from({length: timestamps.length}, x => '');\n    confirmed[location] = Array.from({length: timestamps.length}, x => '');\n  }\n\n  // index timestamps for faster lookup (than indexOf)\n  const tsIndexes = {};\n  timestamps.forEach((ts, idx) => tsIndexes[ts] = idx)\n\n  // loop through all rows, build up data\n  for (const row of rows) {\n    const timestamp = row[0];\n    const location = row[1];\n\n    const tsIndex = tsIndexes[timestamp];\n\n    confirmed[location][tsIndex] = row[confirmedIndex];\n    deaths[location][tsIndex] = row[deathsIndex];\n  }\n\n  return {timestamps, deaths, confirmed};\n}\n\nfunction mergeFormattedData(series) {\n  const [jhuDeaths, jhuConfirmed, nytStates, nytCounties] = series;\n  const startEndTimestamps = series\n    .map(({timestamps}) => [timestamps[0], timestamps[timestamps.length-1]])\n    .map(([start, end]) => [moment(start), moment(end)])\n\n  const [maxStart, maxEnd] = startEndTimestamps\n    .reduce(([accum_start, accum_end], [next_start, next_end]) =>\n      [\n        moment.max(accum_start, next_start),\n        moment.max(accum_end, next_end)\n      ]\n    )\n\n  const offsets = startEndTimestamps.map(([start, end]) =>\n    [maxStart.diff(start, 'days'), maxEnd.diff(end, 'days')]\n  )\n\n  for (const [{timestamps, deaths, confirmed}, [startOffset, endOffset]] of zip(series, offsets)) {\n    // remove timestamps/values that precede max start\n    for (let ii = 0; ii < startOffset; ii++) {\n      timestamps.shift();\n    }\n    [deaths, confirmed].filter(x => x).forEach(group =>\n      Object.values(group).forEach(row => {\n        for (let ii = 0; ii < startOffset; ii++) {\n          row.shift();\n        }\n      })\n    )\n\n    // add timestamps and null values for series ending before max end\n    const lastTimestamp = moment(timestamps[timestamps.length-1])\n    for (let ii = 0; ii < startOffset; ii++) {\n      timestamps.push(lastTimestamp.add(1, 'days').format('M/DD/YY'))\n    }\n    [deaths, confirmed].filter(x => x).forEach(group =>\n      Object.values(group).forEach(row => {\n        for (let ii = 0; ii < endOffset; ii++) {\n          row.push(undefined);\n        }\n      })\n    )\n  }\n  const maxTimestamps = series[0].timestamps;\n\n  const deathsData = {\n    ...jhuDeaths.data,\n    ...nytStates.deaths,\n    ...nytCounties.deaths,\n  };\n  const confirmedData = {\n    ...jhuConfirmed.data,\n    ...nytStates.confirmed,\n    ...nytCounties.confirmed,\n  };\n\n  const allLocations = Object.keys(deathsData);\n\n  const deaths = {\n    rows: deathsData,\n    header: maxTimestamps,\n    data: [],\n  };\n  const confirmed = {\n    rows: confirmedData,\n    header: maxTimestamps,\n    data: [],\n  };\n  return {\n    allLocations,\n    deaths,\n    confirmed,\n  }\n};\n\nfunction getData() {\n  return Promise.all(\n    [\n      (\n        window.fetch(JHU_DEATHS)\n          .then(response => response.text())\n          .then(body => parseRawData(body))\n          .then(rows => formatJHURows(rows))\n      ),\n      (\n        window.fetch(JHU_CONFIRMED)\n          .then(response => response.text())\n          .then(body => parseRawData(body))\n          .then(rows => formatJHURows(rows))\n      ),\n      (\n        window.fetch(NYT_STATES)\n          .then(response => response.text())\n          .then(body => parseRawData(body))\n          .then(rows => formatNYTRows(rows))\n      ),\n      (\n        window.fetch(NYT_COUNTIES)\n          .then(response => response.text())\n          .then(body => parseRawData(body))\n          .then(rows => formatNYTRows(rows, true))\n      ),\n    ]).then(mergeFormattedData);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from \"react-router-dom\";\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Switch>\n        <Route exact path={'/'} component={App} />\n        <Redirect to={'/'} />\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}