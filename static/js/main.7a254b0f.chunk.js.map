{"version":3,"sources":["serviceWorker.js","utils/index.js","components/line-chart/index.js","components/form/checksheet/index.js","components/form/index.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","cycle","arr","MyLineChart","state","colors","Array","from","this","props","colorsByKey","keys","forEach","key","next","value","data","max","datum","Object","entries","_val","val","Number","point","setState","activePoint","content","dataKey","getColors","width","height","margin","top","right","left","bottom","stroke","domain","scale","getMaxValue","getTooltip","map","idx","activeDot","onMouseOver","onDotEnter","bind","onMouseOut","onDotLeave","type","React","Component","defaultProps","CheckSheet","visible","handleInputChange","onSubmit","options","option","selectedValues","e","preventDefault","locations","filter","name","event","target","checked","heading","containerClassName","className","onClick","onChange","Form","locationSelectedValues","periodSelectedValue","scaleSelectedValue","periodOptions","makePeriodOption","locationOptions","makeOptions","scaleOptions","evnt","onPeriodChange","opt","onScaleChange","onLocationChange","period","makeName","row","country","App","confirmed","deaths","getData","configuration","length","updateState","header","rows","fetch","then","response","text","body","parseRawData","parsed","rawData","_rows","Papa","parse","slice","sort","a","b","localeCompare","offset","timestamps","Set","locationSet","timestamp","add","has","newState","href","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7a254b0f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const cycle = function* (arr) {\n  while (true) yield* arr;\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  CartesianGrid,\n  Legend,\n  Line,\n  LineChart,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport {cycle} from 'utils';\n\nexport default class MyLineChart extends React.Component {\n  static propTypes = {\n    data: PropTypes.array.isRequired,\n    keys: PropTypes.array.isRequired,\n    scale: PropTypes.string.isRequired,\n    colors: PropTypes.array,\n  };\n\n  static defaultProps = {\n    colors: [\n      '#ff8150',\n      '#ffc139',\n      '#5dffcf',\n      '#3ef1fc',\n      '#4ec9ff',\n    ],\n  };\n\n  constructor() {\n    super();\n    this.state = {};\n  }\n\n  getColors() {\n    const colors = cycle(Array.from(this.props.colors))\n    const colorsByKey = {};\n    this.props.keys.forEach(\n      key => colorsByKey[key] = colors.next().value\n    );\n    return colorsByKey;\n  }\n\n  getMaxValue(data) {\n    let max = 0;\n    data.forEach(datum => {\n      Object.entries(datum).forEach(([key, _val]) => {\n        if (key === 'timestamp') {\n          return;\n        }\n        const val = Number(_val);\n        if (val > max) {\n          max = val;\n        }\n      });\n    });\n    return max;\n  }\n\n  onDotEnter(point) {\n    this.setState({\n      activePoint: point,\n    });\n  }\n\n  onDotLeave() {\n    this.setState({\n      activePoint: null,\n    });\n  }\n\n  getTooltip() {\n    const {activePoint} = this.state;\n    if (activePoint) {\n      return (\n        <Tooltip content={() => (\n            <span>\n              {activePoint.dataKey}: {activePoint.value}\n            </span>\n          )\n        } />\n      );\n    }\n    return (<Tooltip />);\n  }\n\n  render() {\n    const {data, keys} = this.props;\n    const colorsByKey = this.getColors();\n    return (\n      <LineChart\n        width={800}\n        height={800}\n        data={data}\n        margin={{\n          top: 5,\n          right: 20,\n          left: 10,\n          bottom: 5 \n        }}>\n        <CartesianGrid stroke=\"#f5f5f5\" />\n        <XAxis dataKey=\"timestamp\" />\n        <YAxis\n          domain={[\n            this.props.scale === 'log' ? 'auto' : 0,\n            this.getMaxValue(data)\n          ]}\n          scale={this.props.scale}\n        />\n        <Legend />\n        {this.getTooltip()}\n        {keys.map((key, idx) => (\n          <Line\n            activeDot={{\n              onMouseOver:this.onDotEnter.bind(this),\n              onMouseOut:this.onDotLeave.bind(this),\n            }}\n            type=\"monotone\"\n            dataKey={key}\n            stroke={colorsByKey[key]}\n            key={key} />\n         ))}\n      </LineChart>\n    );\n  }\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.css';\n\nexport default class CheckSheet extends React.Component {\n  static propTypes = {\n    heading: PropTypes.string.isRequired,\n    options: PropTypes.array.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    selectedValues: PropTypes.array.isRequired,\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      visible: false,\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  componentWillReceiveProps(props) {\n    const state = {\n      visible: props.visible,\n    };\n    props.options.forEach(option => state[option.key] = false);\n    props.selectedValues.forEach(value => state[value] = true);\n    this.setState(state);\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n\n    const visible = !this.state.visible;\n    if (!visible) {\n      const locations = Object.entries(this.state)\n        .filter(([name, val]) => val && name !== 'visible')\n        .map(([name, val]) => name)\n      this.props.onSubmit(locations);\n    }\n\n    this.setState({\n      visible,\n    });\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const name = target.name;\n    const value = target.checked;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    const {\n      heading,\n      options,\n    } = this.props;\n    const containerClassName = this.state.visible ? '' : 'CheckSheet--hidden';\n    return (\n      <div className={'CheckSheet'}>\n        <div className={'clearfix'}>\n          <div className={'left'}>\n            <div className={'CheckSheet-heading'}>{heading}</div>\n          </div>\n          <div className={'right'}>\n            <button onClick={this.onSubmit}>\n              {this.state.visible ? 'Update' : 'Select Locations'}\n            </button>\n          </div>\n        </div>\n        <div className={`CheckSheet-container ${containerClassName}`}>\n          {options.map(option => (\n            <label key={option.key}>\n              <input\n                checked={this.state[option.key]}\n                name={option.key}\n                onChange={this.handleInputChange}\n                type={'checkbox'} />\n              {option.key}\n            </label>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport CheckSheet from './checksheet';\n\nimport './index.css';\n\nexport default class Form extends React.Component {\n  static propTypes = {\n    keys: PropTypes.array.isRequired,\n    locationSelectedValues: PropTypes.array.isRequired,\n    periodSelectedValue: PropTypes.number.isRequired,\n    scaleSelectedValue: PropTypes.string.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      locationSelectedValues: props.locationSelectedValues,\n      periodSelectedValue: props.periodSelectedValue,\n      scaleSelectedValue: props.scaleSelectedValue,\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  makeOptions(keys) {\n    return keys.map(key => ({key}));\n  }\n\n  makePeriodOption(value) {\n    let key = 'All time';\n    if (value !== 0) {\n      key = `Last ${value} days`;\n    }\n    return {\n      key,\n      value,\n    };\n  }\n\n  render() {\n    const periodOptions = [3,7,10,14,21,30,60,0].map(this.makePeriodOption);\n    const locationOptions = this.makeOptions(this.props.keys);\n    const scaleOptions = this.makeOptions(['linear', 'log']);\n    return (\n      <div>\n        <div>\n          <div className={'clearfix'}>\n            <div className={'left'}>\n              <span>{'Period'}</span>\n            </div>\n            <div className={'period-selector right'}>\n              <select\n                onChange={(evnt) => this.onPeriodChange(evnt)}\n                value={this.state.periodSelectedValue}>\n                {periodOptions.map(opt => (\n                  <option key={opt.key} value={opt.value}>{opt.key}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </div>\n\n        <div>\n          <div className={'clearfix'}>\n            <div className={'left'}>\n              <span>{'Scale'}</span>\n            </div>\n            <div className={'scale-selector right'}>\n              {scaleOptions.map(option => (\n                <label key={option.key}>\n                  <input\n                    checked={option.key === this.props.scaleSelectedValue}\n                    name={'scale'}\n                    value={option.key}\n                    onChange={(evnt) => this.onScaleChange(evnt)}\n                    type={'radio'} />\n                  {option.key}\n                </label>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className={'location-selector'}>\n          <CheckSheet\n            heading={'Country / State'}\n            options={locationOptions}\n            onSubmit={(locationSelectedValues) => this.onLocationChange(locationSelectedValues)}\n            selectedValues={this.state.locationSelectedValues}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  onLocationChange(locationSelectedValues) {\n    this.setState({locationSelectedValues}, this.onSubmit)\n  }\n\n  onPeriodChange(evnt) {\n    this.setState({periodSelectedValue: Number(evnt.target.value)}, this.onSubmit);\n  }\n\n  onScaleChange(evnt) {\n    this.setState({scaleSelectedValue: evnt.target.value}, this.onSubmit);\n  }\n\n  onSubmit() {\n    this.props.onSubmit({\n      scale: this.state.scaleSelectedValue,\n      period: this.state.periodSelectedValue,\n      locations: this.state.locationSelectedValues,\n    });\n  }\n}\n\n","import React from 'react';\n\nimport Papa from 'papaparse';\n\nimport Chart from './components/line-chart';\nimport Form from './components/form';\n\nimport './App.css';\n\nconst DEATHS = \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv\";\n\nconst CONFIRMED = \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\";\n\nfunction makeName(row) {\n  const state = row[0];\n  const country = row[1];\n\n  if (country && state) {\n    return `${country} - ${state}`\n  } else if (country) {\n    return country;\n  } else if (state) {\n    return state;\n  }\n  return '???';\n}\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      confirmed: {\n        data: [],\n      },\n      deaths: {\n        data: [],\n      },\n      keys: [],\n      locations: [\n        'Italy',\n        'Spain',\n        'France',\n        'US',\n      ],\n      period: 30,\n      scale: 'linear',\n    }\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.getData(this.state);\n  }\n\n  getData(configuration) {\n    const {confirmed, deaths} = this.state;\n\n    if (!deaths.data.length) {\n      window.fetch(DEATHS)\n        .then(response => response.text())\n        .then(body => this.parseRawData(body))\n        .then(parsed => this.updateState(parsed, configuration, 'deaths'))\n    } else {\n      this.updateState([deaths.header, deaths.rows], configuration, 'deaths');\n    }\n\n    if (!confirmed.data.length) {\n      window.fetch(CONFIRMED)\n        .then(response => response.text())\n        .then(body => this.parseRawData(body))\n        .then(parsed => this.updateState(parsed, configuration, 'confirmed'))\n    } else {\n      this.updateState([confirmed.header, confirmed.rows], configuration, 'confirmed');\n    }\n  }\n\n  parseRawData(rawData) {\n    const _rows = Papa.parse(rawData).data\n    const header = _rows[0];\n    const rows = _rows.slice(1)\n      .sort((a,b) => makeName(a).localeCompare(makeName(b)))\n    return [header, rows];\n  }\n\n  updateState([header, rows], configuration, dataKey) {\n    const {\n      locations,\n      period,\n      scale,\n    } = configuration;\n\n    const tsOffset = 4;\n    let offset = tsOffset;\n    if (period !== 0) {\n      offset = header.length - period;\n    }\n    const timestamps = header.slice(offset);\n\n    let keys = new Set();\n    const locationSet = new Set(locations);\n    const data = timestamps.map((timestamp, idx) => {\n      const datum = {\n        timestamp,\n      };\n      rows.forEach(row => {\n        const name = makeName(row);\n        keys.add(name);\n        if (locationSet.has(name)) {\n          datum[name] = row[offset + idx];\n        }\n      });\n      return datum;\n    });\n    keys = Array.from(keys);\n    const newState = {\n      [dataKey]: {\n        data,\n        header,\n        rows,\n      },\n      keys,\n      locations,\n      period,\n      scale\n    }\n    this.setState(newState);\n  }\n\n  onSubmit(configuration) {\n    this.getData(configuration);\n  }\n\n  render() {\n    const {\n      confirmed,\n      deaths,\n      keys,\n      locations,\n      period,\n      scale,\n    } = this.state;\n    return (\n      <div className=\"App\">\n        <h1 className=\"App-Header\">The Coronavirus Curve</h1>\n        <div className={'App-Form'}>\n          <Form\n            periodSelectedValue={period}\n            locationSelectedValues={locations}\n            scaleSelectedValue={scale}\n            keys={keys}\n            onSubmit={this.onSubmit} />\n        </div>\n\n        <h1 className=\"App-Header\">Deaths</h1>\n        <div className={'App-Chart-container'}>\n          <div>\n            <Chart\n              data={deaths.data}\n              keys={locations}\n              scale={scale} />\n          </div>\n        </div>\n\n        <div className={'spacer'}></div>\n\n        <h1 className=\"App-Header\">Confirmed Cases</h1>\n        <div className={'App-Chart-container'}>\n          <div>\n            <Chart\n              data={confirmed.data}\n              keys={locations}\n              scale={scale} />\n          </div>\n        </div>\n\n        <div className={'spacer'}></div>\n\n        <div className={'spacer about'}>\n          Data: <a href=\"https://github.com/CSSEGISandData/COVID-19\">Johns Hopkins CSSE</a>\n        </div>\n\n        <div className={'spacer'}></div>\n      </div>\n    );\n  }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}