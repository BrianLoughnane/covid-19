{"version":3,"sources":["utils/index.js","line-chart/index.js","form/index.js","App.js","serviceWorker.js","index.js"],"names":["cycle","arr","MyLineChart","state","colors","Array","from","this","props","colorsByKey","keys","forEach","key","next","value","data","max","datum","Object","entries","_val","val","Number","point","setState","activePoint","content","dataKey","getColors","width","height","margin","top","right","left","bottom","stroke","domain","getMaxValue","getTooltip","map","idx","activeDot","onMouseOver","onDotEnter","bind","onMouseOut","onDotLeave","type","React","Component","defaultProps","MyForm","onSubmit","locationSelectedValues","periodSelectedValue","periodOptions","makePeriodOption","locationOptions","makeLocationOptions","className","onChange","evnt","onPeriodChange","opt","heading","options","onLocationChange","selectedValues","target","period","locations","CheckSheet","visible","handleInputChange","option","e","preventDefault","filter","name","event","checked","containerClassName","onClick","makeName","row","country","App","getData","configuration","top10","window","fetch","then","response","text","body","parseRawData","rawData","rows","Papa","parse","header","dataRows","slice","sort","a","b","length","localeCompare","offset","timestamps","Set","timestamp","add","has","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cffd7c36.chunk.js","sourcesContent":["export const cycle = function* (arr) {\n  while (true) yield* arr;\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  CartesianGrid,\n  Legend,\n  Line,\n  LineChart,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport {cycle} from '../utils';\n\nexport default class MyLineChart extends React.Component {\n  static propTypes = {\n    data: PropTypes.array.isRequired,\n    keys: PropTypes.array.isRequired,\n    colors: PropTypes.array,\n  };\n\n  static defaultProps = {\n    colors: [\n      '#ff8150',\n      '#ffc139',\n      '#5dffcf',\n      '#3ef1fc',\n      '#4ec9ff',\n    ],\n  };\n\n  constructor() {\n    super();\n    this.state = {};\n  }\n\n  getColors() {\n    const colors = cycle(Array.from(this.props.colors))\n    const colorsByKey = {};\n    this.props.keys.forEach(\n      key => colorsByKey[key] = colors.next().value\n    );\n    return colorsByKey;\n  }\n\n  getMaxValue(data) {\n    let max = 0;\n    data.forEach(datum => {\n      Object.entries(datum).forEach(([key, _val]) => {\n        if (key === 'timestamp') {\n          return;\n        }\n        const val = Number(_val);\n        if (val > max) {\n          max = val;\n        }\n      });\n    });\n    return max;\n  }\n\n  onDotEnter(point) {\n    this.setState({\n      activePoint: point,\n    });\n  }\n\n  onDotLeave() {\n    this.setState({\n      activePoint: null,\n    });\n  }\n\n  getTooltip() {\n    const {activePoint} = this.state;\n    if (activePoint) {\n      return (\n        <Tooltip content={() => (\n            <span>\n              {activePoint.dataKey}: {activePoint.value}\n            </span>\n          )\n        } />\n      );\n    }\n    return (<Tooltip />);\n  }\n\n  render() {\n    const {data, keys} = this.props;\n    const colorsByKey = this.getColors();\n    return (\n      <LineChart\n        width={800}\n        height={800}\n        data={data}\n        margin={{\n          top: 5,\n          right: 20,\n          left: 10,\n          bottom: 5 \n        }}>\n        <CartesianGrid stroke=\"#f5f5f5\" />\n        <XAxis dataKey=\"timestamp\" />\n        <YAxis domain={[0, this.getMaxValue(data)]}/>\n        <Legend />\n        {this.getTooltip()}\n        {keys.map((key, idx) => (\n          <Line\n            activeDot={{\n              onMouseOver:this.onDotEnter.bind(this),\n              onMouseOut:this.onDotLeave.bind(this),\n            }}\n            type=\"monotone\"\n            dataKey={key}\n            stroke={colorsByKey[key]}\n            key={key} />\n         ))}\n      </LineChart>\n    );\n  }\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.css';\n\nexport default class MyForm extends React.Component {\n  static propTypes = {\n    keys: PropTypes.array.isRequired,\n    locationSelectedValues: PropTypes.array.isRequired,\n    periodSelectedValue: PropTypes.number.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n  }\n\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      locationSelectedValues: props.locationSelectedValues,\n      periodSelectedValue: props.periodSelectedValue,\n    };\n  }\n\n  makeLocationOptions(keys) {\n    return keys.map(key => ({key}));\n  }\n\n  makePeriodOption(value) {\n    let key = 'All time';\n    if (value !== 0) {\n      key = `Last ${value} days`;\n    }\n    return {\n      key,\n      value,\n    };\n  }\n\n  render() {\n    const periodOptions = [3,7,10,14,21,30,60,0].map(this.makePeriodOption);\n    const locationOptions = this.makeLocationOptions(this.props.keys);\n    return (\n      <div>\n        <div className={'period-selector'}>\n          <div className={'clearfix'}>\n            <div className={'left'}>\n              <span>{'Period'}</span>\n            </div>\n            <div className={'right'}>\n              <select\n                onChange={(evnt) => this.onPeriodChange(evnt)}\n                value={this.state.periodSelectedValue}>\n                {periodOptions.map(opt => (\n                  <option key={opt.key} value={opt.value}>{opt.key}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </div>\n\n        <div className={'location-selector'}>\n          <CheckSheet\n            heading={'Country / State'}\n            options={locationOptions}\n            onSubmit={(locationSelectedValues) => this.onLocationChange(locationSelectedValues)}\n            selectedValues={this.state.locationSelectedValues}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  onLocationChange(locationSelectedValues) {\n    this.setState({locationSelectedValues}, this.onSubmit)\n  }\n\n  onPeriodChange(evnt) {\n    this.setState({periodSelectedValue: Number(evnt.target.value)}, this.onSubmit);\n  }\n\n  onSubmit() {\n    this.props.onSubmit({\n      period: this.state.periodSelectedValue,\n      locations: this.state.locationSelectedValues,\n    });\n  }\n}\n\nclass CheckSheet extends React.Component {\n  static propTypes = {\n    heading: PropTypes.string.isRequired,\n    options: PropTypes.array.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    selectedValues: PropTypes.array.isRequired,\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      visible: false,\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  componentWillReceiveProps(props) {\n    const state = {\n      visible: props.visible,\n    };\n    props.options.forEach(option => state[option.key] = false);\n    props.selectedValues.forEach(value => state[value] = true);\n    this.setState(state);\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n\n    const visible = !this.state.visible;\n    if (!visible) {\n      const locations = Object.entries(this.state)\n        .filter(([name, val]) => val && name !== 'visible')\n        .map(([name, val]) => name)\n      this.props.onSubmit(locations);\n    }\n\n    this.setState({\n      visible,\n    });\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const name = target.name;\n    const value = target.checked;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    const {\n      heading,\n      options,\n    } = this.props;\n    const containerClassName = this.state.visible ? '' : 'CheckSheet--hidden';\n    return (\n      <div className={'CheckSheet'}>\n        <div className={'clearfix'}>\n          <div className={'left'}>\n            <span>{heading}</span>\n          </div>\n          <div className={'right'}>\n            <button onClick={this.onSubmit}>\n              {this.state.visible ? 'Update' : 'Select Locations'}\n            </button>\n          </div>\n        </div>\n        <div className={`CheckSheet-container ${containerClassName}`}>\n          {options.map(option => (\n            <label key={option.key}>\n              <input\n                checked={this.state[option.key]}\n                name={option.key}\n                onChange={this.handleInputChange}\n                type={'checkbox'} />\n              {option.key}\n            </label>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\n","import React from 'react';\nimport Papa from 'papaparse';\nimport Chart from './line-chart';\nimport Form from './form';\nimport './App.css';\n\nconst dataUrl = \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv\"\n\nfunction makeName(row) {\n  const state = row[0];\n  const country = row[1];\n\n  if (country && state) {\n    return `${country} - ${state}`\n  } else if (country) {\n    return country;\n  } else if (state) {\n    return state;\n  }\n  return '???';\n}\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n      keys: [],\n      locations: [\n        'Italy',\n        'Spain',\n        'France - France',\n        'US - New York',\n      ],\n      period: 30,\n    }\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.getData(this.state);\n  }\n\n  getData(configuration, top10) {\n    window.fetch(dataUrl)\n      .then(response => response.text())\n      .then(body => this.parseRawData(body, configuration, top10))\n  }\n\n  parseRawData(rawData, configuration, top10) {\n    const rows = Papa.parse(rawData).data\n    const header = rows[0];\n    const dataRows = rows.slice(1)\n      .sort((a,b) => Number(a[header.length-1]) - Number(b[header.length-1]))\n      .slice(-200)\n      .sort((a,b) => makeName(a).localeCompare(makeName(b)))\n\n    const tsOffset = 4;\n    let offset = tsOffset;\n    if (configuration.period !== 0) {\n      offset = header.length - configuration.period;\n    }\n    const timestamps = header.slice(offset);\n\n    let keys = new Set();\n    const locations = new Set(configuration.locations);\n    const data = timestamps.map((timestamp, idx) => {\n      const datum = {\n        timestamp,\n      };\n      dataRows.forEach(row => {\n        const name = makeName(row);\n        keys.add(name);\n        if (locations.has(name)) {\n          datum[name] = row[offset + idx];\n        }\n      });\n      return datum;\n    });\n    keys = Array.from(keys);\n    this.setState({\n      ...configuration,\n      data,\n      keys,\n    });\n  }\n\n  onSubmit(configuration) {\n    this.getData(configuration);\n  }\n\n  render() {\n    const {\n      data,\n      keys,\n      locations,\n      period,\n    } = this.state;\n    return (\n      <div className=\"App\">\n        <h1 className=\"App-Header\">COVID-19 Deaths</h1>\n        <div className={'App-Form'}>\n          <Form\n            periodSelectedValue={period}\n            locationSelectedValues={locations}\n            keys={keys}\n            onSubmit={this.onSubmit} />\n        </div>\n        <div className={'App-Chart-container'}>\n          <div>\n            <Chart\n              data={data}\n              keys={locations} />\n          </div>\n        </div>\n        <div className={'App-footer'}></div>\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}